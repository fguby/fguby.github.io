{
    "version": "https://jsonfeed.org/version/1",
    "title": "(๑•̀ㅂ•́)و✧",
    "subtitle": "人间情事一丢，就有了清澈的骨骼",
    "icon": "https://fguby.love/images/favicon.ico",
    "description": "懒、宅、二次元、萝莉控",
    "home_page_url": "https://fguby.love",
    "items": [
        {
            "id": "https://fguby.love/hotpatch-2/",
            "url": "https://fguby.love/hotpatch-2/",
            "title": "热补丁之旅（二）ELF研究",
            "date_published": "2021-01-24T03:29:25.000Z",
            "content_html": "<p>要想反编译一个 Linux 二进制文件或者实现热补丁的原理，那么不可避免地，首先就需要理解二进制格式本身。</p>\n<p><a id=\"more\"></a></p>\n<p>一个 ELF 文件由 4 部分组成</p>\n<ol>\n<li>ELF 头 （ELF header）</li>\n<li>程序头表 （Program header table）</li>\n<li>节 （Section）</li>\n<li>节头表 （Section header table）</li>\n</ol>\n<h2 id=\"文件类型\"><a class=\"anchor\" href=\"#文件类型\">#</a> 文件类型</h2>\n<p>一个 ELF 文件可以分为以下几种类型 （由 e_type 的值决定）</p>\n<ol>\n<li>\n<p>ET_NOTE</p>\n<p>未知类型，表明文件类型不确定，或者还未定义</p>\n</li>\n<li>\n<p>ET_REL</p>\n<p>重定位文件，意味着这个文件里标记了一段可重定位的代码，也就是编译后的.o 文件</p>\n</li>\n<li>\n<p>ET_EXEC</p>\n<p>可执行文件，就是通常所说的二进制文件。</p>\n</li>\n<li>\n<p>ET_DYN</p>\n<p>共享目标文件，一个动态的可链接的目标文件，也称为共享库，也就是 so 文件</p>\n</li>\n<li>\n<p>ET_CORE</p>\n<p>核心文件，在程序崩溃或者进程传递了一个 SIGSEGV 信号时，会在核心文件中记录整个进程的镜像信息</p>\n</li>\n</ol>\n<h2 id=\"elf-header\"><a class=\"anchor\" href=\"#elf-header\">#</a> ELF header</h2>\n<p>程序头是对二进制文件中段的描述，是程序装载所必需的一部分。段是在内核装载时被解析的，描述了磁盘上可执行文件的内存布局以及如何映射到内存中。</p>\n<p>64 位可执行文件程序头结构如下：（每个字段的详细值都可以从该节末的链接中查看）</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> e_ident<span class=\"token punctuation\">[</span>EI_NIDENT<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Elf64_Half    e_type<span class=\"token punctuation\">;</span>        \t<span class=\"token comment\">/* 文件类型 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Elf64_Half    e_machine<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* 编译平台 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Elf64_Word    e_version<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* 版本 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Elf64_Addr    e_entry<span class=\"token punctuation\">;</span>       \t<span class=\"token comment\">/* 入口函数的虚拟地址 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Elf64_Off \te_phoff<span class=\"token punctuation\">;</span>      \t\t<span class=\"token comment\">/* 程序头表的偏移量 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  Elf64_Off \te_shoff<span class=\"token punctuation\">;</span>       \t<span class=\"token comment\">/* 节头表的偏移量 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  Elf64_Word    e_flags<span class=\"token punctuation\">;</span>       \t<span class=\"token comment\">/* Processor-specific flags */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  Elf64_Half    e_ehsize<span class=\"token punctuation\">;</span>      \t<span class=\"token comment\">/* ELF header size in bytes */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Elf64_Half    e_phentsize<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 程序头表的大小 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  Elf64_Half    e_phnum<span class=\"token punctuation\">;</span>        \t<span class=\"token comment\">/* 程序头表的数量 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  Elf64_Half    e_shentsize<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 节头表的大小 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  Elf64_Half    e_shnum<span class=\"token punctuation\">;</span>        \t<span class=\"token comment\">/* 节头表的数目 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  Elf64_Half    e_shstrndx<span class=\"token punctuation\">;</span>     \t<span class=\"token comment\">/* Section header string table index */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_Ehdr<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第一个字段 <code>e_ident</code>  是一个 16 字节的数组，用于标识文件。 <code>e_ident</code>  的前 4 个字节（即文件本身的前 4 个字节）是序列（0x7f, 'E', 'L', 'F')，用来将文件标记为 ELF 文件</p>\n<p><code>e_type</code>  目标文件类型，主要值：</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Value</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ET_NOTE</td>\n<td>0</td>\n<td>未知类型</td>\n</tr>\n<tr>\n<td>ET_REL</td>\n<td>1</td>\n<td>可重定位文件</td>\n</tr>\n<tr>\n<td>ET_EXEC</td>\n<td>2</td>\n<td>可执行的二进制文件</td>\n</tr>\n<tr>\n<td>ET_DYN</td>\n<td>3</td>\n<td>动态库 so 文件</td>\n</tr>\n<tr>\n<td>ET_CORE</td>\n<td>4</td>\n<td>core 文件</td>\n</tr>\n</tbody>\n</table>\n<p><code>e_machine</code>  标明了该二进制文件的编译平台，例如 <code>0x3e</code>  代表 AMD x86-64 的架构</p>\n<p>可以从文末的链接中查看每个字段的详细信息。</p>\n<h3 id=\"重要属性\"><a class=\"anchor\" href=\"#重要属性\">#</a> 重要属性</h3>\n<p>有几个比较重要的属性需要提前注意一下，后面写代码时会用到：</p>\n<ol>\n<li>\n<p>e_phoff</p>\n<p>segment 的头部偏移</p>\n</li>\n<li>\n<p>e_phentsize</p>\n<p>segment 的头部大小</p>\n</li>\n<li>\n<p>e_phnum</p>\n<p>segment 的头部数量</p>\n</li>\n<li>\n<p>e_shoff</p>\n<p>section 的头部偏移</p>\n</li>\n<li>\n<p>e_shentsize</p>\n<p>section 的头部大小</p>\n</li>\n<li>\n<p>e_shnum</p>\n<p>section 的头部数量</p>\n</li>\n</ol>\n<h3 id=\"关于e_shstrndx\"><a class=\"anchor\" href=\"#关于e_shstrndx\">#</a> 关于 <code>e_shstrndx</code></h3>\n<p>ELF 文件中的每个 section 都是有名字的，比如.data、.text，每个名字其实都是一个字符串，既然是字符串就需要一个字符串池来保存，而这个字符串池其实也是一个 section。这个特殊的字符串池叫.shstrtab。</p>\n<p>前面的示例图中其实也能够看到，所有 section 的头部都是连续存放在一起的，类似于一个数组，而这个 e_shsrtndx 变量就是.shstrtab 这个节在这个数组中的下标。</p>\n<h2 id=\"program-headers\"><a class=\"anchor\" href=\"#program-headers\">#</a> Program headers</h2>\n<p>程序头是对二进制文件中段的描述，是程序装载必需的一部分。段（segment）是在内核装载时被解析的，描述了磁盘上可执行文件的内存布局以及如何映射到内存中，可以通过引用原始 ELF 头中 <code>e_phoff</code>  的偏移量来得到程序头表。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">elf64_phdr</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Elf64_Word p_type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Elf64_Word p_flags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Elf64_Off p_offset<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Segment file offset */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Elf64_Addr p_vaddr<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Segment virtual address */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Elf64_Addr p_paddr<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Segment physical address */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Elf64_Xword p_filesz<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* Segment size in file */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Elf64_Xword p_memsz<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Segment size in memory */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Elf64_Xword p_align<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Segment alignment, file &amp; memory */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> Elf64_Phdr<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>根据 <code>p_type</code>  的值，可以判断段的类型，从 <code>elf.h</code>  头文件中可以看到段的类型比较多</p>\n<pre><code class=\"language-c#\">#define\tPT_NULL\t\t0\t\t/* Program header table entry unused */\n#define PT_LOAD\t\t1\t\t/* Loadable program segment */\n#define PT_DYNAMIC\t2\t\t/* Dynamic linking information */\n#define PT_INTERP\t3\t\t/* Program interpreter */\n#define PT_NOTE\t\t4\t\t/* Auxiliary information */\n#define PT_SHLIB\t5\t\t/* Reserved */\n#define PT_PHDR\t\t6\t\t/* Entry for header table itself */\n#define PT_TLS\t\t7\t\t/* Thread-local storage segment */\n#define\tPT_NUM\t\t8\t\t/* Number of defined types */\n#define PT_LOOS\t\t0x60000000\t/* Start of OS-specific */\n#define PT_GNU_EH_FRAME\t0x6474e550\t/* GCC .eh_frame_hdr segment */\n#define PT_GNU_STACK\t0x6474e551\t/* Indicates stack executability */\n#define PT_GNU_RELRO\t0x6474e552\t/* Read-only after relocation */\n#define PT_LOSUNW\t0x6ffffffa\n#define PT_SUNWBSS\t0x6ffffffa\t/* Sun Specific segment */\n#define PT_SUNWSTACK\t0x6ffffffb\t/* Stack segment */\n#define PT_HISUNW\t0x6fffffff\n#define PT_HIOS\t\t0x6fffffff\t/* End of OS-specific */\n#define PT_LOPROC\t0x70000000\t/* Start of processor-specific */\n#define PT_HIPROC\t0x7fffffff\t/* End of processor-specific */\n</code></pre>\n<p>这里介绍一些比较重要的段。</p>\n<h3 id=\"pt_load\"><a class=\"anchor\" href=\"#pt_load\">#</a> PT_LOAD</h3>\n<p>一个 ELF 文件至少有一个 PT_LOAD 类型的段，这类程序头描述的是可装载的段，也就是说，这种类型的段将被装载或者映射到内存中。</p>\n<p>例如，一个需要动态链接的 ELF 可执行文件通常会包含以下两个可以装载的段（类型为 PT_LOAD)</p>\n<ol>\n<li>存放程序代码的 text 段</li>\n<li>存放全局变量和动态链接信息的 data 段</li>\n</ol>\n<p>text 段也就是经常说的代码段，该段的权限一般设置为 PT_X | PT_R ，0x05</p>\n<p>data 段也就是数据段，权限一般设置为 PT_W  | PT_R （读和写）0x06</p>\n<p>这里要注意的是，text 段和 data 段都是 <code>PT_LOAD</code>  类型的段，判断段究竟是 <code>text</code>  段还是 <code>data</code>  段还需要取 <code>p_offset</code>  的值。</p>\n<p><code>p_offset</code>  等于 0 的 <code>PT_LOAD</code>  类型的段才是 text 段。</p>\n<h3 id=\"pt_dynamic\"><a class=\"anchor\" href=\"#pt_dynamic\">#</a> PT_DYNAMIC</h3>\n<p>动态段是动态链接可执行文件所特有的，包含了动态链接器所必需的一些信息。</p>\n<ol>\n<li>运行时需要链接的共享库列表</li>\n<li>全局偏移表（GOT）的地址</li>\n<li>重定位的相关信息</li>\n</ol>\n<h3 id=\"pt_note\"><a class=\"anchor\" href=\"#pt_note\">#</a> PT_NOTE</h3>\n<p>该类型的段可能保存了与系统相关的附加信息，在可执行文件实际运行时是不需要这个段的。</p>\n<h3 id=\"pt_interp\"><a class=\"anchor\" href=\"#pt_interp\">#</a> PT_INTERP</h3>\n<p>该段只将位置和大小信息存放在一个以 null 为终止符的字符串中，是对程序解释器位置的描述。</p>\n<p>例如， <code>/lib/ld-linx.so.2</code>  一般是指动态链接器的位置，也即程序解释器的位置。</p>\n<h3 id=\"pt_phdr\"><a class=\"anchor\" href=\"#pt_phdr\">#</a> PT_PHDR</h3>\n<p>该段保存了程序头表的本身的位置和大小，保存了所有的 Phdr 对文件中段的描述信息。</p>\n<h2 id=\"section-header\"><a class=\"anchor\" href=\"#section-header\">#</a> Section header</h2>\n<p>在每个段中，会有代码和数据被划分为不同的节。节头表是对这些节的位置和大小的描述，主要用于链接和调试。</p>\n<h3 id=\"text节\"><a class=\"anchor\" href=\"#text节\">#</a> .text 节</h3>\n<p>存放编译好的二进制可执行代码，如果存在 Phdr，.text 节就会存在于.text 段中，由于.text 节保存了程序代码，因此节的类型为 <code>SHT_PROGBITS</code></p>\n<h3 id=\"rodata节\"><a class=\"anchor\" href=\"#rodata节\">#</a> .rodata 节</h3>\n<p>保存只读的数据，例如字符串常量、const 的变量，只能在 text 段中找到.rodata 节</p>\n<h3 id=\"plt节\"><a class=\"anchor\" href=\"#plt节\">#</a> .plt 节</h3>\n<p>包含了动态链接器调用从共享库导入的函数所必需的相关代码</p>\n<h3 id=\"data节\"><a class=\"anchor\" href=\"#data节\">#</a> .data 节</h3>\n<p>.data 节存在于 data 段中，保存了初始化的全局变量等数据</p>\n<h3 id=\"bss节\"><a class=\"anchor\" href=\"#bss节\">#</a> .bss 节</h3>\n<p>保存了未进行初始化的全局变量，是 data 段的一部分，占用空间不超过 4 字节，仅表示这个节本身的空间。</p>\n<h3 id=\"symtab\"><a class=\"anchor\" href=\"#symtab\">#</a> .symtab</h3>\n<p>符号表，记录的则是函数和变量</p>\n<h3 id=\"strtab\"><a class=\"anchor\" href=\"#strtab\">#</a> .strtab</h3>\n<p>字符串表、字符串常量和变量名</p>\n<h3 id=\"gotplt节\"><a class=\"anchor\" href=\"#gotplt节\">#</a> .got.plt 节</h3>\n<p>.got 节保存了全局偏移表，.got 节和.plt 节一起提供了对导入的共享库函数的访问入口，由动态链接器在运行时进行修改。</p>\n<h3 id=\"dynsym节\"><a class=\"anchor\" href=\"#dynsym节\">#</a> .dynsym 节</h3>\n<p>保存了从共享库导入的动态符号信息，该节保存在 text 段中，节类型被标记为 SHT_DYNSYM</p>\n<p>一个 <code>text</code>  段的布局如下：</p>\n<ul>\n<li>[.text] 程序代码</li>\n<li>[.rodata] 只读数据</li>\n<li>[.hash] 符号散列表</li>\n<li>[.dynsym] 共享目标文件符号数据</li>\n<li>[.dynstr] 共享目录文件符号名称</li>\n<li>[.plt] 过程链接表</li>\n<li>[.rel.got] G.O.T 重定位数据</li>\n</ul>\n<h2 id=\"elf符号\"><a class=\"anchor\" href=\"#elf符号\">#</a> ELF 符号</h2>\n<p>符号是对某些类型的数据或者代码（如全局变量和函数）的符号引用。</p>\n<p>例如，printf () 函数会在动态符号表.dynsym 中存有一个指向该函数的符号条目。</p>\n<p>在大多数共享库和动态链接可执行文件中，存在两个符号表： <code>.dynsym</code>  和 <code>.symtab</code> 。</p>\n<p>.dynsym 保存了引用来自外部文件符号的全局符号，如 printf 这样的库函数，.dynsym 保存的符号是.symtab 所保存符号的子集，.symtab 中还保存了可执行文件的本地符号，如全局变量或者代码中定义的本地函数。</p>\n<p>因此，.symtab 保存了所有的符号，而.dynsym 只保存动态 / 全局符号。</p>\n<p>使用 <code>readelf -S main</code>  查看二进制文件的节头，这里我删去一些暂时无用的节</p>\n<pre><code>[Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n\n  [ 5] .dynsym           DYNSYM           00000000000002b8  000002b8\n       00000000000000f0  0000000000000018   A       6     1     8\n\n  [26] .symtab           SYMTAB           0000000000000000  00001040\n       0000000000000660  0000000000000018          27    43     8\n\n\n</code></pre>\n<p>从打印出来的信息中可以看到一部分节的 Flags 被标记为了 A（ALLOC）、WA（WRITE/ALLOC）或者 AX（ALLOC/EXC）</p>\n<p>.dynsym 被标记了 A（ALLOC），而.symtab 则没有被标记</p>\n<p><code>ALLOC</code>  表示有该标记的节会在运行时分配并装载进入内存，而.symtab 不是在运行时必需的，因此不会被装载到内存中。.dynsym 保存的符号只能在运行时被解析，因此是运行时动态链接器所需要的唯一符号。</p>\n<p><code>.dynsym</code>  符号表对于动态链接可执行文件的执行来说是必需的</p>\n<p>一个 64 位 ELF 文件符号项的结构</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    uint32_t      st_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> st_info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> st_other<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    uint16_t      st_shndx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Elf64_Addr    st_value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Uint64_t      st_size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Elf64_sym<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>\n<p>st_name</p>\n<p>保存了指向符号表中字符串表（位于.dynstr 或者.strtab）的偏移地址，偏移地址存放着符号的名称，如 printf</p>\n</li>\n<li>\n<p>st_value</p>\n<p>存放符号的值（可能是地址或者位置偏移量）</p>\n</li>\n<li>\n<p>st_size</p>\n<p>存放了一个符号的大小</p>\n</li>\n<li>\n<p>st_shndx</p>\n<p>每个符号表条目的定义都与某些节对应，该变量保存了相关节头表的索引</p>\n</li>\n<li>\n<p>st_info</p>\n<p>符号类型</p>\n</li>\n</ol>\n<h3 id=\"查看符号表条目\"><a class=\"anchor\" href=\"#查看符号表条目\">#</a> 查看符号表条目</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>readelf -s 二进制文件 <span class=\"token comment\"># 注意是小写的 s</span></pre></td></tr></table></figure><h2 id=\"修改elf文件的入口\"><a class=\"anchor\" href=\"#修改elf文件的入口\">#</a> 修改 ELF 文件的入口</h2>\n<p>好了，去掉那些长篇大论的废话，学习还是要从实践开始入手。</p>\n<p>如果你对结构还有不清楚的地方，可以自行去谷歌学习一下，在这里我引用一张别的博客所画的结构图，文末有博客链接。</p>\n<p><img data-src=\"/images/elf-file-format.png\" alt=\"avatar\" /></p>\n<p>先从一个简单的功能开始，修改一个 ELF 文件的入口地址。</p>\n<p>一段示例代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> stage <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">initializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    stage <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initializer function (stage: %d) \\n\"</span><span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>destructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">finalizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    stage <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finalizer function (stage: %d) \\n\"</span><span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    stage <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main function (stage: %d) \\n\"</span><span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">alternativeEntryPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    stage <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is an alternative entry point to the program (stage: %d) \\n\"</span><span class=\"token punctuation\">,</span> stage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>正常编译后的打印应该如下：</p>\n<blockquote>\n<p>initializer function (stage: 1)<br />\nmain function (stage: 2)<br />\nfinalizer function (stage: 3)</p>\n</blockquote>\n<p>首先，找一下 <code>alternativeEntryPoint</code>  函数的地址</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>readelf -s <span class=\"token builtin class-name\">test</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> alternativeEntryPoint</pre></td></tr></table></figure><p>得到</p>\n<pre><code> 54: 000000000000074b    54 FUNC    GLOBAL DEFAULT   14 alternativeEntryPoint\n</code></pre>\n<p>ok，可以看到 <code>alternativeEntryPoint</code>  函数的入口地址是 <code>0x74b</code></p>\n<p>然后，修改代码如下</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/stat.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/mman.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;elf.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">stat</span> st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Elf64_Ehdr <span class=\"token operator\">*</span>ehdr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> O_RDWR<span class=\"token operator\">|</span>O_CREAT<span class=\"token punctuation\">,</span> <span class=\"token number\">00777</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fd <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fstat</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>st<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fstat fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 建立内存映射</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>mem <span class=\"token operator\">=</span> <span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> st<span class=\"token punctuation\">.</span>st_size<span class=\"token punctuation\">,</span> PROT_READ<span class=\"token operator\">|</span>PROT_WRITE<span class=\"token punctuation\">,</span> MAP_SHARED<span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mem <span class=\"token operator\">==</span> MAP_FAILED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mmap failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    ehdr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Elf64_Ehdr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>mem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"old entry: %lx\"</span><span class=\"token punctuation\">,</span> ehdr<span class=\"token operator\">-></span>e_entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 在这里将入口修改为 0x74b</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    ehdr<span class=\"token operator\">-></span>e_entry <span class=\"token operator\">=</span> <span class=\"token number\">0x74b</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编译修改代码 =&gt; 执行，应该会打印出原本 ELF 文件的入口地址。</p>\n<p>这时候，再用 <code>readelf</code>  命令查看一下二进制文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>readelf -h <span class=\"token builtin class-name\">test</span></pre></td></tr></table></figure><pre><code>ELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              DYN (Shared object file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x74b\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          6632 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         9\n  Size of section headers:           64 (bytes)\n  Number of section headers:         29\n  Section header string table index: 28\n\n</code></pre>\n<p>入口地址顺利修改成功，再次执行二进制文件，输出：</p>\n<pre><code>This is an alternative entry point to the program (stage: 1)\n</code></pre>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NodXF1YW4ubWUvMjAxOC8wNS8yMS9lbGYtaW50cm9kdWNlLw==\">http://chuquan.me/2018/05/21/elf-introduce/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWZzcGVjcy5saW51eGZvdW5kYXRpb24ub3JnL2VsZi9nYWJpNCsvY2g0LmVoZWFkZXIuaHRtbA==\">https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzg5Lw==\">https://paper.seebug.org/89/</span></p>\n",
            "tags": [
                "热补丁",
                "C",
                "ELF"
            ]
        },
        {
            "id": "https://fguby.love/hotpatch-1/",
            "url": "https://fguby.love/hotpatch-1/",
            "title": "热补丁之旅（一）开胃小菜",
            "date_published": "2021-01-23T13:29:25.000Z",
            "content_html": "<p>如何在进程不停止的情况下进行某些函数的替换呢？</p>\n<p><a id=\"more\"></a></p>\n<h2 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h2>\n<p>一段基础代码如下:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现原理\"><a class=\"anchor\" href=\"#实现原理\">#</a> 实现原理</h2>\n<p>热补丁就是在目标进程不重启的情况下，替换某些函数达到热升级的效果。</p>\n<p>替换函数的过程是基于探针进行的，根据原函数的名称，找到函数入口的内存地址。</p>\n<p>重写原函数的指令，使用 <code>JMP</code>  命令跳转到替换函数。</p>\n<h2 id=\"热补丁过程\"><a class=\"anchor\" href=\"#热补丁过程\">#</a> 热补丁过程</h2>\n<ol>\n<li>\n<p>下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2Z0d2FyZS5pbnRlbC5jb20vY29udGVudC93d3cvdXMvZW4vZGV2ZWxvcC9hcnRpY2xlcy9waW4tYS1iaW5hcnktaW5zdHJ1bWVudGF0aW9uLXRvb2wtZG93bmxvYWRzLmh0bWw=\"> Inter Pin</span>，解压到某个目录下，后面将使用这个工具来实现替换函数的过程。</p>\n</li>\n<li>\n<p>准备一个示例程序，先随便写个简单的程序：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">print_msg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please enter some thing\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">print_msg</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 热补丁将要替换的函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">print_msg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!%s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>编译后，执行下二进制文件 <code>./main</code> ，输出如下，打印的字符串为小写的 <code>hello world!$&#123;name&#125;</code></p>\n<pre><code>Please enter some thing\nwsq\nhello world!wsq\n</code></pre>\n</li>\n<li>\n<p>准备热补丁函数 <code>hotpatch.cpp</code> ，将该文件放在 <code>pin目录/source/tools/SimpleExamples</code>  中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"pin.H\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 原函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> target_routine_name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"print_msg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 补丁函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print_msg_patched</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>original_routine_ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>return_address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HELLOWORLD!!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">loaded_image_callback</span><span class=\"token punctuation\">(</span> IMG current_image<span class=\"token punctuation\">,</span> VOID <span class=\"token operator\">*</span>v <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// look for the routine in the loaded image</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    RTN current_routine <span class=\"token operator\">=</span> <span class=\"token function\">RTN_FindByName</span><span class=\"token punctuation\">(</span>current_image<span class=\"token punctuation\">,</span> target_routine_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// stop if the routine was not found in this image</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">RTN_Valid</span><span class=\"token punctuation\">(</span>current_routine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// skip routines which are unsafe for replacement</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">RTN_IsSafeForProbedReplacement</span><span class=\"token punctuation\">(</span>current_routine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Skipping unsafe routine \"</span> <span class=\"token operator\">&lt;&lt;</span> target_routine_name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" in image \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">IMG_Name</span><span class=\"token punctuation\">(</span>current_image<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// replacement routine's prototype: returns void, default calling standard, name, takes no arugments </span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    PROTO replacement_prototype <span class=\"token operator\">=</span> <span class=\"token function\">PROTO_Allocate</span><span class=\"token punctuation\">(</span><span class=\"token function\">PIN_PARG</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> CALLINGSTD_DEFAULT<span class=\"token punctuation\">,</span> target_routine_name<span class=\"token punctuation\">,</span> <span class=\"token function\">PIN_PARG_END</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// replaces the original routine with a jump to the new one </span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">RTN_ReplaceSignatureProbed</span><span class=\"token punctuation\">(</span>current_routine<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                               <span class=\"token function\">AFUNPTR</span><span class=\"token punctuation\">(</span>read_input_patched<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                               IARG_PROTOTYPE<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                               replacement_prototype<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                               IARG_ORIG_FUNCPTR<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                               IARG_FUNCARG_ENTRYPOINT_VALUE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                               IARG_RETURN_IP<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                               IARG_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">PROTO_Free</span><span class=\"token punctuation\">(</span>replacement_prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Successfully replaced \"</span> <span class=\"token operator\">&lt;&lt;</span> target_routine_name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" from image \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">IMG_Name</span><span class=\"token punctuation\">(</span>current_image<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">PIN_InitSymbols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">PIN_Init</span><span class=\"token punctuation\">(</span>argc<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to initialize PIN.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// registers a callback for the \"load image\" action</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token function\">IMG_AddInstrumentFunction</span><span class=\"token punctuation\">(</span>loaded_image_callback<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// runs the program in probe mode</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">PIN_StartProgramProbed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>修改 <code>pin目录/source/tools/SimpleExamples/makefile.rules</code>  文件</p>\n<pre><code>// 修改如下项\nTEST_TOOL_ROOTS := hotpatch\n</code></pre>\n</li>\n<li>\n<p>该目录下执行 <code>make</code>  命令，应该会生成一个 <code>obj-intel64</code>  目录，里面存放着编译后的 <code>hotpatch.so</code>  文件</p>\n</li>\n<li>\n<p>再次执行之前编译好的二进制文件，但先不输入 name</p>\n</li>\n<li>\n<p>执行如下命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/pin -pid <span class=\"token variable\">$&#123;测试进程的pid&#125;</span> -t obj-intel64/hotpatch.so</pre></td></tr></table></figure></li>\n<li>\n<p>这时候回到执行二进制文件的窗口</p>\n<pre><code>Please enter some thing\n// 如果打印如下，则证明热补丁函数已经替换成功\nSuccessfully replaced print_msg from image /home/fguby/cProjects/ctest/main\n</code></pre>\n</li>\n<li>\n<p>随便输入一个 name，输出结果:</p>\n<pre><code>wsq  // 这是我的输入\nHELLOWORLD!!  // 程序输出\n</code></pre>\n<p>你会发现 <code>helloworld</code>  字符串已经全部变成大写，而且不再打印你的输入。</p>\n</li>\n</ol>\n",
            "tags": [
                "热补丁",
                "C",
                "Inter Pin"
            ]
        },
        {
            "id": "https://fguby.love/go-gc/",
            "url": "https://fguby.love/go-gc/",
            "title": "Go GC",
            "date_published": "2021-01-02T11:29:25.000Z",
            "content_html": "<p>GC，全称 GarbageCollection，即垃圾回收，是一种自动内存管理的机制，go 语言中采用的 GC 算法又叫三色标记法。<br />\n<a id=\"more\"></a></p>\n<h2 id=\"什么是gc\"><a class=\"anchor\" href=\"#什么是gc\">#</a> 什么是 GC</h2>\n<p><strong>GC</strong>，全称<strong> GarbageCollection</strong>，即垃圾回收，是一种自动内存管理的机制。</p>\n<p>当程序向操作系统申请的内存不再需要时，垃圾回收主动将其回收并供其他代码进行内存申请时候复用，或者将其归还给操作系统，这种针对内存级别资源的自动回收过程，即为垃圾回收。</p>\n<p>通常，垃圾回收器的执行过程被划分为两个半独立的组件：</p>\n<ul>\n<li><strong>赋值器</strong>（Mutator）：这一名称本质上是在指代用户态的代码，因为对垃圾回收器而言，用户态的代码仅仅只是在修改对象之间的引用关系。</li>\n<li><strong>回收器</strong>（Collector）：负责执行垃圾回收的代码。</li>\n</ul>\n<h2 id=\"根对象\"><a class=\"anchor\" href=\"#根对象\">#</a> 根对象</h2>\n<p>根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：</p>\n<ol>\n<li>全局变量：程序在编译器就能确定的那些存在于程序整个生命周期的变量</li>\n<li>执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量以及指向分配的堆内存区块的指针</li>\n<li>寄存器：寄存器的值可能表示一个指针</li>\n</ol>\n<h2 id=\"常见的gc实现方式\"><a class=\"anchor\" href=\"#常见的gc实现方式\">#</a> 常见的 GC 实现方式</h2>\n<p>所有的 GC 算法其存在形式可以归结为追踪和引用计数这两种形式的混合运用</p>\n<ul>\n<li>追踪式 GC</li>\n<li>引用计数式 GC</li>\n</ul>\n<p>GO 的 GC 使用的是无分代（对象没有代际之分）、不整理（回收过程中不对对象进行移动与整理）、并发（与用户代码并发执行）的三色标记清扫算法，原因在于：</p>\n<ol>\n<li>对象整理的优势是解决内存碎片问题以及 “允许” 使用顺序内存分配器。go 运行时的分配算法基于 tcmalloc，基本上没有碎片问题。</li>\n<li>分代 GC 依赖分代假设，即 GC 将主要的回收目标放在新创建的对象上（存活时间短，更倾向于被回收），而非频繁检查所有对象，但 Go 的编译器会通过逃逸分析将大部分新生对象存储在栈上（栈直接被回收），只有那些需要长期存在的对象才会被分配到需要进行垃圾回收的堆中。</li>\n</ol>\n<h2 id=\"三色标记法\"><a class=\"anchor\" href=\"#三色标记法\">#</a> 三色标记法</h2>\n<p>从垃圾回收器的视角来看，三色抽象规定了三种不同类型的对象，并用不同的颜色相称：</p>\n<ul>\n<li>白色对象（可能死亡）：未被回收器访问到的对象，在回收开始阶段，所有对象均为白色，当回收结束后，白色对象均不可达</li>\n<li>灰色对象（波面）：已被回收器访问到的对象，但回收器需要对其中的一个或多个指针进行扫描，因为他们可能还指向白色对象。</li>\n<li>黑色对象（确定存活）：已被回收器访问到的对象，其中所有字段都已被扫描，黑色对象中任何一个指针都不可能直接指向白色对象。</li>\n</ul>\n<h2 id=\"stw\"><a class=\"anchor\" href=\"#stw\">#</a> STW</h2>\n<p><strong>STW</strong> 是指在垃圾回收过程中为了保证实现的正确性、防止无止境的内存增长等问题而不可避免的需要停止赋值器进一步操作对象图的一段过程。</p>\n<p>在这个过程中整个用户代码被停止或者放缓指向，STW 越长，对用户代码造成的影响（例如延迟）就越大。</p>\n<p>GC 在进入 STW 时，需要等待让所有的用户态代码停止。</p>\n<h2 id=\"如何观察go-gc\"><a class=\"anchor\" href=\"#如何观察go-gc\">#</a> 如何观察 Go GC？</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> n <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>方法 1:  <code>GODEBUG=gctrace=1</code></p>\n<p>方法 2:  <code>go tool trace</code></p>\n<p>主要功能是将统计而来的信息以一种可视化的方式展示给用户。</p>\n<p>方法 3:  <code>debug.ReadGCStats</code></p>\n<p>此方式可以通过代码的方式来直接实现对感兴趣指标的监控，例如一秒监控一次 GC 的状态。</p>\n<h2 id=\"为什么会内存泄漏\"><a class=\"anchor\" href=\"#为什么会内存泄漏\">#</a> 为什么会内存泄漏？</h2>\n<h3 id=\"形式1-预期能被快速释放的内存因被根对象引用而没有得到迅速释放\"><a class=\"anchor\" href=\"#形式1-预期能被快速释放的内存因被根对象引用而没有得到迅速释放\">#</a> 形式 1: 预期能被快速释放的内存因被根对象引用而没有得到迅速释放。</h3>\n<p>当有一个全局对象时，可能不经意间将某个变量附着在其上，且忽略的将其进行释放，则该内存永远不会得到释放。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> cache <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">keepalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tm <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tcache<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"形式2-goroutine泄漏\"><a class=\"anchor\" href=\"#形式2-goroutine泄漏\">#</a> 形式 2: goroutine 泄漏</h3>\n<p>Goroutine 作为一种逻辑上理解的轻量级线程，需要维护执行用户代码的上下文信息。在运行过程中也需要消耗一定的内存来保存这类信息，而这些内存在目前版本的 Go 中是不会被释放的。因此，如果一个程序持续不断地产生新的 goroutine、且不结束已经创建的 goroutine 并复用这部分内存，就会造成内存泄漏的现象。</p>\n<h2 id=\"并发标记\"><a class=\"anchor\" href=\"#并发标记\">#</a> 并发标记</h2>\n<p>没有用户态代码并发修改三色抽象的情况下，回收可以正常结束，但是并发回收的根本问题在于，用户态代码在回收过程中会并发地更新对象图，从而造成赋值器和回收器可能对对象图的结构产生不同的认知。</p>\n<ul>\n<li>初始状态：假设某个黑色对象 C 指向某个灰色对象 A，而 A 指向白色对象 B；</li>\n<li>C.ref3 = c.ref2.ref1: 赋值器并发地将黑色对象 C 指向（ref3）了白色对象 B；</li>\n<li>A.ref1 = nil: 移除灰色对象 A 对白色对象 B 的引用（ref2）</li>\n<li>最终状态：在继续扫描的过程中，白色对象 B 永远不会被标记为黑色对象了（回收器不会重新扫描黑色对象），进而对象 B 被错误地回收</li>\n</ul>\n<p>并发标记清除中面临的一个根本问题就是如何保证标记与清除过程的正确性。</p>\n<h2 id=\"什么是写屏障-混合写屏障如何实现\"><a class=\"anchor\" href=\"#什么是写屏障-混合写屏障如何实现\">#</a> 什么是写屏障、混合写屏障，如何实现？</h2>\n<p>写屏障是一个在并发垃圾回收器中才会出现的概念，垃圾回收器的正确性体现在：不应出现对象的丢失，也不应错误的回收还不需要回收的对象。</p>\n<p>当以下两个条件同时满足时会破坏垃圾回收器的正确性：</p>\n<ul>\n<li>条件 1: 赋值器修改对象图，导致某一黑色对象引用白色对象</li>\n<li>条件 2: 从灰色对象出发，到达白色对象的、未经访问过的路径被赋值器破坏</li>\n</ul>\n<p>只要能够避免其中任何一个条件，就不会出现对象丢失的情况，因为：</p>\n<ul>\n<li>如果条件 1 被避免，则所有白色对象均被灰色对象引用，没有白色对象会被遗漏；</li>\n<li>如果条件 2 被避免，即便白色对象的指针被写入到黑色对象中，但从灰色对象出发，总存在一条没有访问过的路径，从而找到到达白色对象的路径，白色对象最终不会被遗漏。</li>\n</ul>\n<p>将三色不变性所定义的波面根据这两个条件进行削弱：</p>\n<ul>\n<li>当满足原有的三色不变性定义（或上面的两个条件都不满足时）的情况称为强三色不变性</li>\n<li>当赋值器令黑色对象引用白色对象时的情况称为弱三色不变性</li>\n</ul>\n<p>当赋值器进一步破坏灰色对象到达白色对象的路径时，即打破弱三色不变性，也就破坏了回收器的正确性；</p>\n<p>弱三色不变性的好处在于：只要存在未访问的能够到达白色对象的路径，就可以将黑色对象指向白色对象。</p>\n<p>在允许灰色赋值器存在的算法，最坏的情况下，回收器只能将所有赋值器线程停止才能完成其根对象的完整扫描，也就是我们说的 STW。</p>\n<p>为了确保强弱三色不变性的并发指针更新操作，需要通过赋值器屏障技术来保证指针的读写操作一致，赋值器的写屏障用来保证赋值器在进行指针写操作时，不会破坏弱三色不变性。</p>\n<blockquote>\n<p>黑色赋值器：已经由回收器扫描过，不会再次对其进行扫描<br />\n灰色赋值器：尚未被回收器扫描，或尽管已经扫描过但扔需要重新扫描</p>\n</blockquote>\n<p>有两种非常经典的写屏障：Dijkstra 插入屏障和 Yuasa 删除屏障。</p>\n<p>灰色赋值器的 Dijkstra 插入屏障的基本思想是避免满足条件 1，</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">DijkstraWritePointer</span><span class=\"token punctuation\">(</span>slot <span class=\"token operator\">*</span>unsafe<span class=\"token punctuation\">.</span>Pointer<span class=\"token punctuation\">,</span> ptr unsafe<span class=\"token punctuation\">.</span>Pointer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token function\">shade</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token operator\">*</span>slot <span class=\"token operator\">=</span> ptr</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了防止黑色对象指向白色对象，应该假设 <code>*slot</code>  可能会变为黑色，为了确保 <code>ptr</code>  不会在被赋值到 <code>*slot</code>  前变为白色， <code>shade(ptr)</code>  会先将指针 ptr 标记为灰色，进而避免了条件 1.</p>\n<p>但是，由于并不清楚赋值器以后会不会将这个引用删除，因此还需要重新扫描来重新确定关系图，这时需要 STW。</p>\n<p>插入屏障的好处在于可以立刻开始并发标记，但是因为产生了灰色的赋值器，缺陷是需要标记终止阶段 STW 时进行重新扫描。</p>\n<p>黑色赋值器的 Yuasa 删除屏障的基本思想是避免满足条件 2:</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 黑色赋值器 Yuasa 屏障</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">YuasaWritePointer</span><span class=\"token punctuation\">(</span>slot <span class=\"token operator\">*</span>unsafe<span class=\"token punctuation\">.</span>Pointer<span class=\"token punctuation\">,</span> ptr unsafe<span class=\"token punctuation\">.</span>Pointer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token function\">shade</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>slot<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token operator\">*</span>slot <span class=\"token operator\">=</span> ptr</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了防止丢失从灰色对象到白色对象的路径，应该假设 <code>*slot</code>  可能会变为黑色，为了确保 <code>ptr</code>  不会在被赋值到 <code>*slot</code>  前变为白色， <code>shade(*slot)</code>  会先将 <code>*slot</code>  标记为灰色，进而该写操作总是创造了一条灰色到灰色或者灰色到白色对象的路径。</p>\n<p>Yuasa 删除屏障的优势在于不需要标记结束阶段的重新扫描，缺陷是依然会产生丢失的对象，需要在标记开始前对整个对象图进行快照。</p>\n<p>Go 在 1.8 的时候为了简化 GC 的流程，同时减少标记终止阶段的重扫成本，将 Dijkstra 插入屏障和 Yuasa 删除屏障进行混合，形成混合写屏障。</p>\n<p>该屏障提出的基本思想是：</p>\n<blockquote>\n<p>对正在被覆盖的对象进行着色，且如果当前栈未扫描完成，则同样对指针进行着色。</p>\n</blockquote>\n<h2 id=\"gc的流程\"><a class=\"anchor\" href=\"#gc的流程\">#</a> GC 的流程</h2>\n<p>当前版本的 Go 以 STW 为界限，可以将 GC 划分为五个阶段：</p>\n<ul>\n<li>GCMark<br />\n 标记准备阶段，为并发标记做准备工作，启动写屏障<br />\n赋值器处于 STW 状态</li>\n<li>GCMARK<br />\n 扫描标记阶段，与赋值器并发执行，写屏障开启<br />\n赋值器处于并发状态</li>\n<li>GCMarkTermination<br />\n 标记终止阶段，保证一个周期内标记任务完成，停止写屏障<br />\n赋值器这时处于 STW 状态</li>\n<li>GCoff<br />\n 内存清扫阶段，将需要回收的内存归还到堆中，写屏障关闭<br />\n赋值器处于并发状态</li>\n<li>GCoff<br />\n 内存归还阶段，将过多的内存归还给操作系统，写屏障关闭<br />\n赋值器处于并发状态</li>\n</ul>\n<h2 id=\"触发gc的时机是什么\"><a class=\"anchor\" href=\"#触发gc的时机是什么\">#</a> 触发 GC 的时机是什么？</h2>\n<p>Go 语言中对 GC 的触发时机存在两种形式:</p>\n<ol>\n<li>主动触发，通过调用 runtime.GC 来触发 GC，此调用阻塞式地等待当前 GC 运行完毕</li>\n<li>被动触发，分为两种方式\n<ul>\n<li>使用系统监控，当超过两分钟没有产生任何 GC 时，强制触发 GC</li>\n<li>使用步调算法，其核心思想是控制内存增长的比例</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"如果内存分配速度超过标记清除的速度怎么办\"><a class=\"anchor\" href=\"#如果内存分配速度超过标记清除的速度怎么办\">#</a> 如果内存分配速度超过标记清除的速度怎么办？</h2>\n<p>目前的 Go 实现中，当 GC 触发后，会首先进入并发标记的阶段。并发标记会设置一个标志，并在 mallocgc 调用时进行检查。<br />\n当存在新的内存分配时，会暂停分配内存过快的那些 goroutine，并将其转去执行一些辅助标记的工作，从而达到放缓继续分配，辅助 GC 的标记工作的目的。<br />\n编译器会分析用户代码，并在需要分配内存的位置，将申请内存的操作翻译为 mallocgc 调用。</p>\n<h2 id=\"go的gc如何调优\"><a class=\"anchor\" href=\"#go的gc如何调优\">#</a> Go 的 GC 如何调优</h2>\n<p>Go 可供用户调整的参数只有 GOGC 环境变量，当我们谈论 GC 调优时，通常是指减少用户代码对 GC 产生的压力，这一方面包含了减少用户代码分配内存的数量，另外一方面包含了最小化 Go 的 GC 对 CPU 的使用率（即调整 GOGC）</p>\n<p>GC 调优的核心思想：优化内存的申请速度，尽可能的少申请内存，复用已申请的内存。</p>\n<p>GC 的触发原则是由步调算法来控制的，关键在于估计下一次需要触发 GC 时，堆的大小。如果我们在遇到海量请求的时候，为了避免 GC 频繁触发，可以将 GOGC 的值设置得更大，让 GC 触发的时间变得更晚。</p>\n<h2 id=\"相关api\"><a class=\"anchor\" href=\"#相关api\">#</a> 相关 APi</h2>\n<ul>\n<li>runtime.GC 手动触发 GC</li>\n<li>runtime.ReadMemstats 读取内存相关的统计信息，其中包含部分 GC 相关的统计信息</li>\n<li>debug.FreeOSMemory 手动将内存归还给操作系统</li>\n<li>debug.ReadGCStats 读取关于 GC 的相关统计信息</li>\n<li>debug.SetGCPerent 设置 GOGC 调步变量</li>\n</ul>\n",
            "tags": [
                "Golang",
                "GC"
            ]
        },
        {
            "id": "https://fguby.love/typescript/",
            "url": "https://fguby.love/typescript/",
            "title": "TypeScript学习手册",
            "date_published": "2020-12-29T07:29:25.000Z",
            "content_html": "<p>最近对 TypeScript 兴趣比较浓厚，主要是想用 ts 重构之前开发的一个开源作品，所以在这里记录一下学习的整个过程。</p>\n<p><a id=\"more\"></a></p>\n<h2 id=\"基础类型\"><a class=\"anchor\" href=\"#基础类型\">#</a> 基础类型</h2>\n<p>TypeScript 支持的数据类型与 js 基本相同，此外还提供了实用的枚举类型。</p>\n<h3 id=\"基本类型\"><a class=\"anchor\" href=\"#基本类型\">#</a> 基本类型</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 布尔类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> isDone<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 数字 ts 里的所有数字都是浮点数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 字符串 可以使用双引号或者单引号</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bob\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> myName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">wu </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">:</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"元组\"><a class=\"anchor\" href=\"#元组\">#</a> 元组</h3>\n<p>元组类型表示一个已知元素数量和类型的数组，各元素的类型不必相同。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> x<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 正确写法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 错误写法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token comment\">//ok, string 和 number 都有 toString 方法</span></pre></td></tr></table></figure><h3 id=\"枚举\"><a class=\"anchor\" href=\"#枚举\">#</a> 枚举</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red<span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> c<span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>默认情况下，从 0 开始为元素编号，也可以手动指定成员的数值。(可以全部手动指定)</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Green<span class=\"token punctuation\">,</span> Blue<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> c<span class=\"token operator\">:</span> Color <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Green<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>由枚举类型的值得到对应的 name。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> Color <span class=\"token punctuation\">&#123;</span>Red <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Green <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Blue <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> colorName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将输出 Green</span></pre></td></tr></table></figure><h3 id=\"any\"><a class=\"anchor\" href=\"#any\">#</a> Any</h3>\n<p>不清楚类型的变量可以指定为<strong> any</strong> 类型。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> notSure<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>notSure <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>notSure <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr></table></figure><h3 id=\"void\"><a class=\"anchor\" href=\"#void\">#</a> Void</h3>\n<p>某种程度上来说，void 类型像是与 any 类型相反，表示没有任何类型。当一个函数没有返回值时，通常会见到返回值类型设置为 void。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">helloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"null和undefiend\"><a class=\"anchor\" href=\"#null和undefiend\">#</a> Null 和 Undefiend</h3>\n<p>默认情况下，null 和 undefiend 是所有类型的子类型，可以赋值给任何一个类型的变量。</p>\n<p>当指定了 <strong>--strictNullChecks</strong> 标记后，null 和 undefiend 只能赋值给 void 和他们自己。</p>\n<h3 id=\"类型断言\"><a class=\"anchor\" href=\"#类型断言\">#</a> 类型断言</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> someValue<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"this is a string\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> strLength<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>someValue <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"变量声明\"><a class=\"anchor\" href=\"#变量声明\">#</a> 变量声明</h2>\n<h3 id=\"解构数组\"><a class=\"anchor\" href=\"#解构数组\">#</a> 解构数组</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 2</span></pre></td></tr></table></figure><p>这相当于创建了两个变量:</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>first <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>second <span class=\"token operator\">=</span> input<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 <code>...</code>  语法创建剩余变量</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// outputs [ 2, 3, 4 ]</span></pre></td></tr></table></figure><p>作用于函数参数</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"对象解构\"><a class=\"anchor\" href=\"#对象解构\">#</a> 对象解构</h3>\n<p>相当于通过 o.a 和 o.b 创建了 a, b 变量。（需要注意的是，变量名称必须与对象的属性名称相同）</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    b<span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    c<span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对象属性的重命名</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    b<span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    c<span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> first<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> second<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>指定类型</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    b<span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    c<span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> first<span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> second<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"默认值\"><a class=\"anchor\" href=\"#默认值\">#</a> 默认值</h3>\n<p>默认值可以在属性为 undefiend 时使用缺省值。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">keepWholeObject</span><span class=\"token punctuation\">(</span>wholeObject<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1001</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> wholeObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">keepWholeObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"展开\"><a class=\"anchor\" href=\"#展开\">#</a> 展开</h2>\n<p>展开操作符与解构相反，允许将一个数组展开为另一个数组，或将一个对象展开为另一个对象，例如:</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> bothPlus <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>second<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bothPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h2>\n<p>接口里的属性值并不都是必须的。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SquareConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    color<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    width<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span>square<span class=\"token operator\">:</span> SquareConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> area<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> newSquare <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>color<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> area<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        newSquare<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> square<span class=\"token punctuation\">.</span>color</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        newSquare<span class=\"token punctuation\">.</span>area <span class=\"token operator\">=</span> square<span class=\"token punctuation\">.</span>width</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> newSquare</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">createSquare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>color<span class=\"token operator\">:</span> <span class=\"token string\">\"Red\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>只读属性</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">readonly</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">readonly</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">:</span> Point <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">11</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">11</span> <span class=\"token comment\">// error</span></pre></td></tr></table></figure><h3 id=\"接口描述函数类型\"><a class=\"anchor\" href=\"#接口描述函数类型\">#</a> 接口描述函数类型</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> subString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> mySearch<span class=\"token operator\">:</span> SearchFunc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> subString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> result <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"实现接口\"><a class=\"anchor\" href=\"#实现接口\">#</a> 实现接口</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    currentTime<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Clock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ClockInterface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    currentTime<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"混合类型\"><a class=\"anchor\" href=\"#混合类型\">#</a> 混合类型</h3>\n<p>例如，一个对象可以同时当作函数和对象使用。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    interval<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Counter <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>Counter<span class=\"token operator\">></span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    counter<span class=\"token punctuation\">.</span>interval <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    counter<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>c<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>c<span class=\"token punctuation\">.</span>interval <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "TypeScript"
            ]
        },
        {
            "id": "https://fguby.love/beautify-blog/",
            "url": "https://fguby.love/beautify-blog/",
            "title": "美化系列小记：Hexo博客",
            "date_published": "2020-12-27T13:29:25.000Z",
            "content_html": "<p>作为一个颜值党，无论是 IDE 还是博客，甚至是操作系统，都需要一定程度的美化，至少赏心悦目才能吃得下去饭吧。</p>\n<p><a id=\"more\"></a></p>\n<p>本篇是美化系列小记的第一篇，如何美化自己的博客。</p>\n<h2 id=\"博客框架\"><a class=\"anchor\" href=\"#博客框架\">#</a> 博客框架</h2>\n<p>我用过 Hexo 和 Hugo，就个人而言，可能 Hexo 目前更好用一些，毕竟主题丰富，尽管 Hugo 号称构建网站最快的框架，但是在主题和插件的支持上目前还比不上 Hexo。</p>\n<p>Hexo 的基本使用参考官网即可，这里就不描述了。</p>\n<h2 id=\"选取主题\"><a class=\"anchor\" href=\"#选取主题\">#</a> 选取主题</h2>\n<p>在 Hexo 官网的主题页面或者是 github 里，你能搜到一大把好看的主题，只要选择自己心仪的那一个即可，一般主题的作者也都会在 README.md 里添上详细的安装教程，当然基本都大同小异。</p>\n<ol>\n<li>\n<p><code>git clone 主题库</code></p>\n</li>\n<li>\n<p>将主题放入到 theme 里即可，然后修改 <code>_config.yaml</code></p>\n</li>\n<li>\n<p>添加主题特有的配置</p>\n</li>\n</ol>\n<h2 id=\"评论系统\"><a class=\"anchor\" href=\"#评论系统\">#</a> 评论系统</h2>\n<p>以我的博客举例，使用的是 valine。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92YWxpbmUuanMub3JnL3F1aWNrc3RhcnQuaHRtbA==\">参考这篇教程</span></p>\n<p>使用起来还是很简单、方便 的，基本上注册完填写对应 App ID 和 App Key 就行了，在主题里的配置基本也都差不多，例如：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">valine</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> xxxx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">appKey</span><span class=\"token punctuation\">:</span> xxxx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">placeholder</span><span class=\"token punctuation\">:</span> ヽ(○´∀`)ﾉ♪ <span class=\"token comment\"># Comment box placeholder</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> mp <span class=\"token comment\"># Gravatar style : mp, identicon, monsterid, wavatar, robohash, retro</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">pageSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\"># Pagination size</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">lang</span><span class=\"token punctuation\">:</span> en</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Article reading statistic</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">NoRecordIP</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Whether to record the commenter IP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">serverURLs</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">powerMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">tagMeta</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">visitor</span><span class=\"token punctuation\">:</span> 孤荡的灵魂</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> 主人</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> 基友们</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span> 土豪</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">tagColor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;quot;var(--color-orange)&amp;quot;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;quot;var(--color-aqua)&amp;quot;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span> <span class=\"token important\">&amp;quot;var(--color-pink)&amp;quot;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">tagMember</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\"># - hash of master@email.com</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\"># - hash of master2@email.com</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">friend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\"># - hash of friend@email.com</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\"># - hash of friend2@email.com</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">investor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\"># - hash of investor1@email.com</span></pre></td></tr></table></figure><h2 id=\"搜索功能-algolia\"><a class=\"anchor\" href=\"#搜索功能-algolia\">#</a> 搜索功能 - algolia</h2>\n<p>建站的时候摸索了一会儿 algolia 的使用办法，在这里记录下。如果你选择的博客主题也使用了 algolia，那么可以参考下。</p>\n<ol>\n<li>\n<p>首先也是注册账号，注册完以后在界面左部的菜单栏找到 API Keys 一栏，点击后你就能看到自己的 Application ID 等必要信息。</p>\n</li>\n<li>\n<p>新建一个用来搜索的 index，博客的数据到时候也会上传到这里。</p>\n</li>\n<li>\n<p>在 API Keys 界面里新建一个 API Key（点击第一个红框圈住的按钮），在添加的界面里<strong> Indices</strong> 中选择步骤 2 里新建的 index，然后在<strong> ACL</strong> 一栏中选中 <code>listIndexes</code> ， <code>deleteObject</code> ， <code>addObject</code></p>\n</li>\n</ol>\n<p><img data-src=\"http://www.midoriya.co/example1227-1.png\" alt=\"avatar\" title=\"示例一\" /></p>\n<ol start=\"4\">\n<li>\n<p>之后在示例的截图中红框圈住的部分就会生成一个 API Keys。</p>\n</li>\n<li>\n<p>安装 algolia 插件。</p>\n</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save hexo-algolia</pre></td></tr></table></figure><ol start=\"6\">\n<li>步骤 4 中得到的 API Keys 就是单独的 API 密钥，执行如下命令。</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HEXO_ALGOLIA_INDEXING_KEY</span><span class=\"token operator\">=</span>API密钥</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./node_modules/.bin/hexo algolia</pre></td></tr></table></figure><ol start=\"7\">\n<li>End</li>\n</ol>\n<h2 id=\"live2d看板娘\"><a class=\"anchor\" href=\"#live2d看板娘\">#</a> live2D 看板娘</h2>\n<p>如果想配置 live2D 看板娘在你的博客上，也很简单，hexo 有现成的插件，直接安装即可使用。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VZSE4vaGV4by1oZWxwZXItbGl2ZTJk\">插件的 github 地址</span></p>\n<ol>\n<li>安装模块</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save hexo-helper-live2d</pre></td></tr></table></figure><ol start=\"2\">\n<li>参照 Example，这里贴下我的配置</li>\n</ol>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">live2d</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">#enable: false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">scriptFrom</span><span class=\"token punctuation\">:</span> local <span class=\"token comment\"># 默认</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">pluginRootPath</span><span class=\"token punctuation\">:</span> live2dw/ <span class=\"token comment\"># 插件在站点上的根目录 (相对路径)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">pluginJsPath</span><span class=\"token punctuation\">:</span> lib/ <span class=\"token comment\"># 脚本文件相对与插件根目录路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">pluginModelPath</span><span class=\"token punctuation\">:</span> assets/ <span class=\"token comment\"># 模型文件相对与插件根目录路径</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\"># scriptFrom: jsdelivr # jsdelivr CDN</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\"># scriptFrom: unpkg # unpkg CDN</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">tagMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 标签模式，是否仅替换 live2d tag 标签而非插入到所有页面中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">debug</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 调试，是否在控制台输出日志</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">model</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">use</span><span class=\"token punctuation\">:</span> rem</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">scale</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.7</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">hHeadPos</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">vHeadPos</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.618</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># use: live2d-widget-model-wanko # npm-module package name</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># use: wanko # 博客根目录 /live2d_models/ 下的目录名</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># use: ./wives/wanko # 相对于博客根目录的路径</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token key atrule\">display</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">position</span><span class=\"token punctuation\">:</span> right</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token key atrule\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">360</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token key atrule\">mobile</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">show</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 是否在移动设备上显示</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">scale</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1.5</span> <span class=\"token comment\"># 移动设备上的缩放</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token key atrule\">react</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token key atrule\">opacityDefault</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.7</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token key atrule\">opacityOnHover</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span></pre></td></tr></table></figure><p>模型可以自己去找，我使用的是雷姆和小埋的模型，如果你也想要的话，可以联系我。</p>\n<h2 id=\"打字机效果\"><a class=\"anchor\" href=\"#打字机效果\">#</a> 打字机效果</h2>\n<p>有些你喜欢的主题可能本身并没有带打字机的效果，这时候其实可以自己手动加一下。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXR0Ym9sZHQuY29tL2RlbW9zL3R5cGVkLWpzLw==\">typed-js</span></p>\n<ol>\n<li>安装 typedjs 或者直接引用 CDN 链接。</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/npm/typed.js@2.0.11<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>添加配置，官方的文档对于各种属性都解释的很清楚，这里贴下我的配置。</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    strings<span class=\"token operator\">:</span> msgs<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    typeSpeed<span class=\"token operator\">:</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    loop<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    loopCount<span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    backSpeed<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cursorChar<span class=\"token operator\">:</span> <span class=\"token string\">'❤'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  typed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Typed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.artboard'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>\n<p>在页面上用 F12 查看你想要显示打字机效果的部分，把 class 的值或者是 id 的值记下来即可，第 4 步会用到。</p>\n</li>\n<li>\n<p>在主题的 layout 目录下找找，看看 header 或者是 footer 对应的文件是哪个，把上面这段代码直接无脑拷贝进去即可，例如这样。</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.jsdelivr.net/npm/typed.js@2.0.11\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    strings<span class=\"token operator\">:</span> msgs<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    typeSpeed<span class=\"token operator\">:</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    loop<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    loopCount<span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    backSpeed<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cursorChar<span class=\"token operator\">:</span> <span class=\"token string\">'❤'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 这里可以是 id 选择器也可以是 class 选择器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     typed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Typed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.artboard'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "工具",
                "美化"
            ]
        },
        {
            "id": "https://fguby.love/Golang/",
            "url": "https://fguby.love/Golang/",
            "title": "Go Scheduler",
            "date_published": "2020-12-26T17:29:25.000Z",
            "content_html": "<p>对 Go 调度器的学习总结，涉及系统调度、Goroutine 模型<br />\n<a id=\"more\"></a></p>\n<h2 id=\"os-scheduler\"><a class=\"anchor\" href=\"#os-scheduler\">#</a> OS Scheduler</h2>\n<p>从操作系统角度看，程序最终都会转换成一系列的机器指令，机器只要按顺序执行完所有的指令就算完成了任务。</p>\n<p>完成 “按顺序执行指令” 任务的实体就是线程，也就是说，线程是 CPU 调度的实体，是真正在 CPU 上执行指令的实体。</p>\n<h2 id=\"线程切换\"><a class=\"anchor\" href=\"#线程切换\">#</a> 线程切换</h2>\n<p>OS Scheduler 调度线程的依据就是它的状态，线程的三种状态：</p>\n<ul>\n<li>Waiting 等待状态，线程在等待某件事的发生，例如等待网络数据、硬盘；调用操作系统 API；等待内存同步访问条件 ready，如 atomic，mutexes</li>\n<li>Runnable 就绪状态，只要给 CPU 资源就能运行</li>\n<li>Executing 运行状态</li>\n</ul>\n<h2 id=\"什么是goroutine\"><a class=\"anchor\" href=\"#什么是goroutine\">#</a> 什么是 goroutine</h2>\n<p>Goroutine 可以看作是对线程加的一层抽象，它更轻量级，可以单独执行，不是 OS 线程，也不是绿色线程（由语言的运行时管理的线程）。</p>\n<h2 id=\"goroutine和thread的区别\"><a class=\"anchor\" href=\"#goroutine和thread的区别\">#</a> goroutine 和 thread 的区别</h2>\n<p>可以从三个角度区别：内存消耗、创建与销毁、切换</p>\n<ul>\n<li>内存占用<br />\n创建一个 goroutine 的栈内存消耗为 2KB，实际运行过程中，如果栈空间不够用，会自动进行扩容。<br />\n创建一个 thread 则需要消耗 1MB 栈内存。</li>\n<li>创建和销毁<br />\n Thread 创建和销毁都会有巨大的消耗，因为要和操作系统打交道，是内核级的，通常解决的办法就是线程池。而 goroutine 因为是由 Go runtime 负责管理的，创建和销毁的销毁非常小，是用户级。</li>\n<li>切换<br />\n线程切换的时候，需要保存各种寄存器，以便将来恢复，goroutine 的切换只需要保存三个寄存器：PC, SP, BP。</li>\n</ul>\n<h2 id=\"mn模型\"><a class=\"anchor\" href=\"#mn模型\">#</a> M:N 模型</h2>\n<p>Go runtime 会负责 Goroutine 的生老病死，从创建到销毁，都一手包办。</p>\n<p>Runtime 会在程序启动的时候，创建 M 个线程（CPU 执行调度的单位），之后创建的 N 个 goroutine 都会依附在这 M 个线程上执行。</p>\n<p>在同一时刻，一个线程上只能跑一个 goroutine，当 goroutine 发生阻塞时，runtime 会把当前的 goroutine 调度走，让其他 goroutine 来执行。</p>\n<h2 id=\"scheduler\"><a class=\"anchor\" href=\"#scheduler\">#</a> Scheduler</h2>\n<p>Runtime 维护所有的 goroutines，并通过 scheduler 来进行调度。</p>\n<p>有三个基础的结构体来实现 goroutines 的调度。</p>\n<p>::G::：代表一个 goroutine<br />\n::M::：表示内核线程，包含正在运行的 goroutine 等字段<br />\n:😛::：代表 g 执行的上下文环境，它维护一个处于 Runable 状态的 G 队列，M 需要获得 P 才能运行 G。</p>\n<p><img data-src=\"http://www.midoriya.co/uPic/1*QaG177Xaz7hHBaJSxSDjBA.png\" alt=\"avatar\" /></p>\n<p>每个 Goroutine 在 OS 线程上（M）运行。</p>\n<p>Runtime 在运行时会启动一些 G：垃圾回收的 G，执行调度的 G，运行用户代码的 G；并且会创建一个 M 用来开始 G 的运行，随着时间推移，更多的 G 会被创建出来，更多的 M 也会被创建出来。</p>\n<p>GO Scheduler 的核心思想就是:</p>\n<ol>\n<li>reuse threads;（复用线程）</li>\n<li>限制同时运行的线程数为 N，N 等于 CPU 的核心数目；（N 可以由 GOMAXPROCS 变量来决定）</li>\n<li>线程私有的 runqueues，并且可以从其他线程 stealing goroutine 来运行，线程阻塞后，可以将 runqueues 传递给其他线程。</li>\n</ol>\n<p>Go 程序启动后，会给每个逻辑核心分配一个 P，同时会给每个 P 分配一个 M，内核线程依然由 OS Scheduler 来调度。</p>\n<h2 id=\"具体流程\"><a class=\"anchor\" href=\"#具体流程\">#</a> 具体流程</h2>\n<p>假设一段代码如下：</p>\n<pre><code>func main() &#123;\n   var wg sync.WaitGroup\n   wg.Add(2)\n\n   go func() &#123;\n      println(`hello`)\n      wg.Done()\n   &#125;()\n\n   go func() &#123;\n      println(`world`)\n      wg.Done()\n   &#125;()\n\n   wg.Wait()\n&#125;\n</code></pre>\n<p>Go 首先会根据逻辑 CPU 核心数创建不同的 P，并且将这些 P 存储在一个空闲的 P 列表中。</p>\n<p><img data-src=\"http://www.midoriya.co/uPic/1*R8hPBHK-8aultosys9D8tQ.png\" alt=\"avatar\" /></p>\n<p>接下来，当有新的 Goroutine 或者是准备运行的 Goroutine 将唤醒 P 以更好地分配工作。</p>\n<p>这个 P 将创建一个关联的 M（系统线程）：<br />\n<img data-src=\"http://www.midoriya.co/uPic/1*CCguz8qrjngfk98HlTpcYA.png\" alt=\"1*CCguz8qrjngfk98HlTpcYA\" /></p>\n<p>当遇到以下情况时 P 又会重新回到上面的空闲列表中：</p>\n<ul>\n<li>没有 Goroutine 准备或是等待运行</li>\n<li>从系统调用中返回</li>\n<li>被垃圾收集器停止（也就是所谓的 STW，stop the world）</li>\n</ul>\n<p>在程序的启动期间，Go 已经创建了一些 OS 线程和相关的 M。</p>\n<h3 id=\"系统调用\"><a class=\"anchor\" href=\"#系统调用\">#</a> 系统调用</h3>\n<p>Go 通过将它们包装在 runtime 中来优化系统调用（无论是否阻塞），这个包装器将自动从线程 M 上分离出 P 并且允许另一个线程来运行它。<br />\n以读取文件为例：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> main（）<span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   buf：<span class=\"token operator\">=</span> <span class=\"token builtin\">make</span>（<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token builtin\">byte</span>，<span class=\"token number\">0</span>，<span class=\"token number\">2</span>）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   fd，<span class=\"token boolean\">_</span>：<span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>Open（“number<span class=\"token punctuation\">.</span>txt”）</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   fd<span class=\"token punctuation\">.</span>Read（buf）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   fd<span class=\"token punctuation\">.</span>Close（）</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token builtin\">println</span>（<span class=\"token builtin\">string</span>（buf<span class=\"token punctuation\">)</span>）<span class=\"token comment\">// 42 </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以下是打开文件时的工作流程：</p>\n<p><img data-src=\"http://www.midoriya.co/uPic/1*l56efREv5Exm21lzNeKt_w.png\" alt=\"1*l56efREv5Exm21lzNeKt_w\" /></p>\n<p>当主协程中执行 os.Open () 函数时，线程 M0 进入阻塞状态，p0 回到空闲列表中并且处于可运行状态。</p>\n<p>然后，当系统调用退出，Go 就会应用以下规则，直到可以满足：</p>\n<ul>\n<li>试图获得完全一样的 P，p0 在空闲列表中，可以继续执行</li>\n<li>尝试在空闲列表中获取一个 p 执行</li>\n<li>把 Goroutine 放到全局可运行队列中，并且将 M 放回空闲列表中</li>\n</ul>\n<p>但是在非阻塞 IO（例如 http 调用）的情况下，Go 还可以处理资源尚未准备就绪的情况。在这种情况下，由于资源尚未准备就绪，Go 将使用网络轮询器将 Goroutine 停放。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">`https://httpstat.us/200`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一旦完成第一个系统调用并明确资源尚未准备就绪，goroutine 将驻留，直到网络轮询器通知，在这种情况下，线程 M 将不会被阻塞。</p>\n<p>Go 调度程序查找后，线程 M 将会运行另外一个 Goroutine。</p>\n<p>如果准备了多个 goroutine，则多余的 goroutine 将进入全局可运行队列，并在以后进行调度。</p>\n<h2 id=\"grq和lrq\"><a class=\"anchor\" href=\"#grq和lrq\">#</a> GRQ 和 LRQ</h2>\n<p>全局可运行队列 (GRQ) 以及本地可运行队列 (LRQ)</p>\n<p>LRQ 存储本地（也就是具体的 p）的可运行 goroutine， GRQ 存储全局的可运行 goroutine，这些 goroutine 还没有分配到具体的 p。</p>\n<h2 id=\"g0\"><a class=\"anchor\" href=\"#g0\">#</a> g0</h2>\n<p>Go 使用::GOMAXPROCS:: 环境变量来限制同时运行的 OS 线程数，这意味着 Go 必须在每个运行的线程上调度和管理 Goroutine，该角色委托给了一个特殊的 Goroutine，也就是::g0::，这是为每个 OS 线程创建的第一个 Goroutine。</p>\n<p><img data-src=\"http://www.midoriya.co/uPic/1*NK13K84tQhVx8DCPSXNG_g.png\" alt=\"1*NK13K84tQhVx8DCPSXNG_g\" /></p>\n<p>随后，g0 将安排就绪的 Goroutine 在线程上运行。</p>\n<h3 id=\"g0的职责\"><a class=\"anchor\" href=\"#g0的职责\">#</a> g0 的职责</h3>\n<p>和普通的 Goroutine 相反，g0 具有确定的和更大的堆栈。<br />\n它的职责包括：</p>\n<ul>\n<li>Goroutine 创建，使用 go 关键字的时候，Go 会将函数创建委托到 g0，然后将创建的 Goroutine 放置到本地队列中</li>\n<li>延迟功能分配</li>\n<li>垃圾收集器操作，例如 STW，扫描 goroutine 的堆栈以及一些标记和清除操作</li>\n<li>堆栈增长，在需要时，Go 会增加 goroutine 的大小，该操作也会通过 g0 来完成</li>\n</ul>\n<p>这种特殊的 goroutine 还涉及到许多其他操作（大分配，cgo 等）。</p>\n<h2 id=\"goroutine调度代价\"><a class=\"anchor\" href=\"#goroutine调度代价\">#</a> goroutine 调度代价</h2>\n<p>在 Go 中，一个 goroutine 的切换确实很轻量级，为了保存 goroutine，它只需要完成两件事：</p>\n<ul>\n<li>goroutine 在未调度之前停止的行，也就是保存当前要运行的行到 PC 寄存器中，稍后 goroutine 将在相同的地方恢复运行。</li>\n<li>goroutine 的堆栈，以便在再次运行时还原局部变量。</li>\n</ul>\n<p>假设有一段这样的代码：<br />\n<img data-src=\"http://www.midoriya.co/uPic/1*TZobNBH4mKyaN8B_ru7tUA.png\" alt=\"1*TZobNBH4mKyaN8B_ru7tUA\" /><br />\n 消费者会打印从 0 到 99 的偶数。</p>\n<p>首先，关注一下第一个 goroutine（生产者），它将数字添加到 channel 的缓冲区中，当缓冲区被填满，当它再次发送数据时将会被阻塞。这个时候，Go 将会切换到 g0 并且调度另外一个 goroutine。</p>\n<p>Go 首先需要保存当前指令，以便在同一条指令中恢复 goroutine，PC 保存在 goroutine 的内部结构中，示例图如下。</p>\n<p><img data-src=\"http://www.midoriya.co/uPic/1*ArVyzi31WBefg4RhhX5Pdw.png\" alt=\"1*ArVyzi31WBefg4RhhX5Pdw\" /></p>\n<p>指令以及地址可以使用以下命令查找:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>go tool objdump</pre></td></tr></table></figure><p><img data-src=\"http://www.midoriya.co/uPic/9888D7A2-E02B-4A9C-8897-A81A760F7247.png\" alt=\"9888D7A2-E02B-4A9C-8897-A81A760F7247\" /></p>\n<p><img data-src=\"http://www.midoriya.co/uPic/1*E9HFNIw4ZhDirUh4dgWbsw.png\" alt=\"1*E9HFNIw4ZhDirUh4dgWbsw\" /></p>\n<p>在通道阻塞之前（runtime.chansend1），程序逐步执行指令，Go 保存当前的 PC 寄存器为当前 goroutine 的一个内部属性.<br />\n 在上图的例子中，Go 通过内存地址 <code>0x4268d0</code>  保存 PC 寄存器，它在 runtime 和函数 runtime.chansend1 的内部。</p>\n<p><img data-src=\"http://www.midoriya.co/uPic/1*i1SaUH3K7pjijTtW-O1TKw.png\" alt=\"1*i1SaUH3K7pjijTtW-O1TKw\" /></p>\n<p>接下来，当 g0 唤醒 goroutine，它将恢复到相同的指令处，执行循环，将值传入通道。</p>\n<h2 id=\"goroutine调度期间的堆栈管理\"><a class=\"anchor\" href=\"#goroutine调度期间的堆栈管理\">#</a> goroutine 调度期间的堆栈管理</h2>\n<p>在被阻塞之前，正在运行的 goroutine 具有原来的堆栈，这个堆栈包含临时的内存，例如变量 <code>i</code> ：</p>\n<p><img data-src=\"http://www.midoriya.co/uPic/1*8oa7ziZBpHZqKVihpQ3b8g.png\" alt=\"1*8oa7ziZBpHZqKVihpQ3b8g\" /></p>\n<p>然后，当它在 channel 上被阻塞的时候，goroutine 以及堆栈都将被切换成 g0 以及 g0 的堆栈，一个更大的堆栈，如图。</p>\n<p><img data-src=\"http://www.midoriya.co/uPic/1*I42dKDU2BV6kTwWMWiA1JQ.png\" alt=\"1*I42dKDU2BV6kTwWMWiA1JQ\" /></p>\n<p>在切换之前，这个堆栈将被保存起来用以 goroutine 再次运行时恢复。<br />\n<img data-src=\"http://www.midoriya.co/uPic/1*kmufEth8mfd7OLnkl9oC7Q.png\" alt=\"1*kmufEth8mfd7OLnkl9oC7Q\" /></p>\n<p>需要注意的是，一些架构例如 arm，需要保存更多的寄存器：LR（连接寄存器）。</p>\n<h2 id=\"goroutine切换总结\"><a class=\"anchor\" href=\"#goroutine切换总结\">#</a> goroutine 切换总结</h2>\n<p>以上图中的 channel 为例：</p>\n<ul>\n<li>当 goroutine 在 channel 上阻塞并且切换到了 g0\n<ol>\n<li>PC 寄存器与堆栈指针一起保存到内部结构中</li>\n<li>g0 被设置为运行协程</li>\n<li>g0 的堆栈替换当前堆栈</li>\n</ol>\n</li>\n<li>g0 正在寻找新的 goroutine 运行</li>\n<li>g0 必须使用选定的 goroutine 进行切换：\n<ol>\n<li>从内部结构中提取出 PC 寄存器和堆栈指针</li>\n<li>程序跳转到从 PC 中提取出来的地址</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"goroutine调度时机\"><a class=\"anchor\" href=\"#goroutine调度时机\">#</a> goroutine 调度时机</h2>\n<ul>\n<li>使用关键字 go<br />\n 创建一个新的 goroutine，Go Scheduler 会考虑调度。<br />\n:: 新创建的 Goroutine 优先运行，并放置在 LRQ 的顶部::</li>\n<li>GC<br />\n 由于进行 GC 的 goroutine 也需要在 M 上运行，因此肯定会发生调度。</li>\n<li>系统调用<br />\n当 goroutine 进行系统调用时，会阻塞 M，所以它会被调度走，同时一个新的 goroutine 会被调度上来</li>\n<li>内存同步访问<br />\n atomic，mutex，channel 操作等会使 goroutine 阻塞，因此会被调度走。</li>\n</ul>\n<p>此外，需要注意，在调度期间，LRQ（本地队列）具有优先级。</p>\n<h2 id=\"work-stealing\"><a class=\"anchor\" href=\"#work-stealing\">#</a> work stealing</h2>\n<p>Go Scheduler 的职责就是将所有处于 Runnable 的 goroutines 均匀分布到在 p 上运行的 M。</p>\n<p>当 P 的 LRQ 里没有 goroutine 时，它会先去全局队列里（GRQ）和网络轮询器中查看，如果这两者都为空，它将从其他 P 那里窃取 goroutine。</p>\n<p>TODO</p>\n<h2 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXJkYW5sYWJzLmNvbS9ibG9nLzIwMTgvMTIvc2NoZWR1bGluZy1pbi1nby1wYXJ0My5odG1s\">Scheduling In Go : Part III - Concurrency</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL2Etam91cm5leS13aXRoLWdvL2dvLWdvcm91dGluZS1vcy10aHJlYWQtYW5kLWNwdS1tYW5hZ2VtZW50LTJmNWE1ZWFmNTE4YQ==\">Go: Goroutine, OS Thread and CPU Management - A Journey With Go - Medium</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZWRpdW0uY29tL2Etam91cm5leS13aXRoLWdvL2dvLWcwLXNwZWNpYWwtZ29yb3V0aW5lLThjNzc4YzY3MDRkOA==\">Go: g0, Special Goroutine - A Journey With Go - Medium</span></p>\n",
            "tags": [
                "Golang",
                "Scheduler"
            ]
        }
    ]
}